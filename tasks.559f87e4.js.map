{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,IKIK,EAAA,E,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,A,G,E,E,W,C,E,a,C,C,GJFL,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,G,E,Q,S,C,C,C,ECVA,EAAA,OAAA,CAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,E,GCA1F,AAAA,EAAA,SAAA,QAAA,CAA8C,IAAA,IAAoB,GAAA,YAAA,GAAA,EAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,uG,I,E,E,S,E,E,QEK1F,EADG,EAAA,GAAA,CAAA,EAAQ,CAAA,CAAA,GACX,IAAA,CAAA,OACA,EAAA,MAAA,CAAA,SACA,EAAA,OAAA,CAAA,UACA,EAAA,MAAA,CAAA,SACA,EAAA,OAAA,CAAA,UACA,EAAA,IAAA,CAAA,OACA,EAAA,QAAA,CAAA,WACA,EAAA,MAAA,CAAA,SACA,EAAA,QAAA,CAAA,WACA,EAAA,aAAA,CAAA,gBAcF,MAAM,EAA0B,aAEhC,IAAI,EAAoB,EAAE,CAE1B,MAAM,EAAQ,SAAS,aAAa,CAAC,cAC/B,EAAQ,SAAS,aAAa,CAAC,eAC/B,EACJ,SAAS,gBAAgB,CAAC,oBACtB,EAAiB,SAAS,cAAc,CAC5C,kBAEI,EAAY,SAAS,aAAa,CAAC,eACnC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAW,SAAS,cAAc,CAAC,YACnC,EAAiB,SAAS,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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-1a875c71a53a9b2b.js","node_modules/@parcel/runtime-js/lib/runtime-239d4d9c912df7fd.js","dist/tasks.js","src/tasks.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire3bba\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire3bba\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nparcelRegister(\"fGYy7\", function(module, exports) {\nmodule.exports = new URL(\"symbol-defs.2cd203c5.svg\", import.meta.url).toString();\n\n});\n\nvar $6653c4dceb3d16c4$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"7UCSQ\",\"tasks.559f87e4.js\",\"2d88Z\",\"symbol-defs.2cd203c5.svg\"]'));\n\n\n\nvar $9EgcF = parcelRequire(\"9EgcF\");\n\nvar $fGYy7 = parcelRequire(\"fGYy7\");\nvar $af9cefb2b7a6e9f1$var$Category;\n(function(Category) {\n    Category[\"Work\"] = \"work\";\n    Category[\"Health\"] = \"health\";\n    Category[\"Finance\"] = \"finance\";\n    Category[\"Family\"] = \"family\";\n    Category[\"Friends\"] = \"friends\";\n    Category[\"Home\"] = \"home\";\n    Category[\"Shopping\"] = \"shopping\";\n    Category[\"Travel\"] = \"travel\";\n    Category[\"Learning\"] = \"learning\";\n    Category[\"Miscellaneous\"] = \"miscellaneous\";\n})($af9cefb2b7a6e9f1$var$Category || ($af9cefb2b7a6e9f1$var$Category = {}));\nconst $af9cefb2b7a6e9f1$var$localStorageKey = \"taska-list\";\nlet $af9cefb2b7a6e9f1$var$tasksList = [];\nconst $af9cefb2b7a6e9f1$var$today = document.querySelector(\".wrap-data\");\nconst $af9cefb2b7a6e9f1$var$tasks = document.querySelector(\".tasks-list\");\nconst $af9cefb2b7a6e9f1$var$filtereBtnIsCompleted = document.querySelectorAll(\".btn-isCompleted\");\nconst $af9cefb2b7a6e9f1$var$categoryFilter = document.getElementById(\"categoryFilter\");\nconst $af9cefb2b7a6e9f1$var$editModal = document.querySelector(\".modal-edit\");\nconst $af9cefb2b7a6e9f1$var$editOverlay = document.querySelector(\".overlay-edit\");\nconst $af9cefb2b7a6e9f1$var$editForm = document.getElementById(\"editForm\");\nconst $af9cefb2b7a6e9f1$var$editTitleInput = document.getElementById(\"editTitleInput\");\nconst $af9cefb2b7a6e9f1$var$editCategorySelect = document.getElementById(\"editCategorySelect\");\nconst $af9cefb2b7a6e9f1$var$editDescriptionText = document.getElementById(\"editDescriptionText\");\nconst $af9cefb2b7a6e9f1$var$editDeadlineTime = document.getElementById(\"editDeadlineTime\");\nconst $af9cefb2b7a6e9f1$var$closeEditModalBtn = document.querySelector(\".btn-modal-close-edit\");\nfunction $af9cefb2b7a6e9f1$var$loadTasks() {\n    const storedTasks = JSON.parse(localStorage.getItem($af9cefb2b7a6e9f1$var$localStorageKey) || \"[]\");\n    $af9cefb2b7a6e9f1$var$tasksList = storedTasks.map((task)=>({\n            ...task,\n            deadline: new Date(task.deadline)\n        }));\n    $af9cefb2b7a6e9f1$var$renderTasks();\n}\nfunction $af9cefb2b7a6e9f1$var$renderTasks(filteredTasks = $af9cefb2b7a6e9f1$var$tasksList) {\n    const markupTasks = filteredTasks.map((task)=>{\n        const formattedDeadline = new Date(task.deadline).toLocaleDateString(\"en-GB\", {\n            day: \"2-digit\",\n            month: \"short\",\n            year: \"numeric\"\n        });\n        return `\r\n      <li class=\"task-item\" data-id=\"${task.id}\">\r\n      <svg width=\"32\" height=\"32\" class=\"${task.isCompleted ? \"icon-completed\" : \"icon-notCompleted\"} toggle-complete\">\r\n      <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($fGYy7))}#${task.isCompleted ? \"icon-check2-circle\" : \"icon-circle\"}\" class=\"done-icon\"></use>\r\n    </svg>\r\n        <div class=\"wrap-content\">\r\n          <div class=\"title-container\">\r\n            <h2 class=\"${task.isCompleted ? \"title-task-completed\" : \"title-task\"}\">${task.title}</h2>\r\n            <div class=\"icons-container\">\r\n              <button type=\"button\" class=\"icon-btn edit-btn\">\r\n                <svg width=\"30\" height=\"30\" class=\"svg-icon\">\r\n                  <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($fGYy7))}#icon-pencil-fill\"></use>\r\n                </svg>\r\n              </button>\r\n              <button type=\"button\" class=\"icon-btn delete-btn\">\r\n                <svg width=\"30\" height=\"30\" class=\"svg-icon\">\r\n                  <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($fGYy7))}#icon-trash-fill\"></use>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <p class=\"category-task\">${task.category}</p>\r\n          ${task.description ? `<p class=\"${task.isCompleted ? \"description-task-completed\" : \"description-task\"}\">${task.description}</p>` : \"\"}\r\n          <p class=\"dedline-data-task\">${formattedDeadline}</p>\r\n        </div>\r\n      </li>\r\n    `;\n    }).join(\"\");\n    $af9cefb2b7a6e9f1$var$tasks.innerHTML = markupTasks;\n}\n// Delete task\nfunction $af9cefb2b7a6e9f1$var$deleteTask(taskId) {\n    $af9cefb2b7a6e9f1$var$tasksList = $af9cefb2b7a6e9f1$var$tasksList.filter((task)=>task.id !== taskId);\n    localStorage.setItem($af9cefb2b7a6e9f1$var$localStorageKey, JSON.stringify($af9cefb2b7a6e9f1$var$tasksList));\n    $af9cefb2b7a6e9f1$var$renderTasks();\n}\n// Edit tasks state \"isCompleted\"\nfunction $af9cefb2b7a6e9f1$var$toggleTaskCompletion(taskId) {\n    $af9cefb2b7a6e9f1$var$tasksList = $af9cefb2b7a6e9f1$var$tasksList.map((task)=>task.id === taskId ? {\n            ...task,\n            isCompleted: !task.isCompleted\n        } : task);\n    localStorage.setItem($af9cefb2b7a6e9f1$var$localStorageKey, JSON.stringify($af9cefb2b7a6e9f1$var$tasksList));\n    $af9cefb2b7a6e9f1$var$renderTasks();\n}\n$af9cefb2b7a6e9f1$var$tasks.addEventListener(\"click\", (e)=>{\n    const target = e.target;\n    // Check for delete button\n    if (target.closest(\".delete-btn\")) {\n        const taskItem = target.closest(\".task-item\");\n        const taskId = taskItem.dataset.id;\n        if (taskId) {\n            $af9cefb2b7a6e9f1$var$deleteTask(taskId);\n            (0, $9EgcF.Notify).info(\"Task deleted successfully!\", {\n                position: \"center-center\",\n                timeout: 1000\n            });\n        }\n    }\n    const toggleCompleteElement = target.closest(\".toggle-complete\");\n    if (toggleCompleteElement) {\n        const taskItem = toggleCompleteElement.closest(\".task-item\");\n        const taskId = taskItem?.dataset.id;\n        if (taskId) {\n            $af9cefb2b7a6e9f1$var$toggleTaskCompletion(taskId);\n            (0, $9EgcF.Notify).success(\"Task completion status updated!\", {\n                position: \"center-center\",\n                timeout: 1000\n            });\n        }\n    }\n    if (target.closest(\".edit-btn\")) {\n        const taskItem = target.closest(\".task-item\");\n        const taskId = taskItem.dataset.id;\n        const taskToEdit = $af9cefb2b7a6e9f1$var$tasksList.find((task)=>task.id === taskId);\n        if (taskToEdit) $af9cefb2b7a6e9f1$var$openEditModal(taskToEdit);\n    }\n});\n// Edit task\nfunction $af9cefb2b7a6e9f1$var$openEditModal(task) {\n    $af9cefb2b7a6e9f1$var$editModal.classList.remove(\"hidden\");\n    $af9cefb2b7a6e9f1$var$editOverlay.classList.remove(\"hidden\");\n    $af9cefb2b7a6e9f1$var$editTitleInput.value = task.title;\n    $af9cefb2b7a6e9f1$var$editCategorySelect.value = task.category;\n    $af9cefb2b7a6e9f1$var$editDescriptionText.value = task.description || \"\";\n    $af9cefb2b7a6e9f1$var$editDeadlineTime.value = task.deadline.toISOString().slice(0, 16);\n    $af9cefb2b7a6e9f1$var$editForm.dataset.taskId = task.id;\n}\nconst $af9cefb2b7a6e9f1$var$closeEditModal = function() {\n    $af9cefb2b7a6e9f1$var$editModal.classList.add(\"hidden\");\n    $af9cefb2b7a6e9f1$var$editOverlay.classList.add(\"hidden\");\n};\n$af9cefb2b7a6e9f1$var$closeEditModalBtn.addEventListener(\"click\", $af9cefb2b7a6e9f1$var$closeEditModal);\n$af9cefb2b7a6e9f1$var$editOverlay.addEventListener(\"click\", $af9cefb2b7a6e9f1$var$closeEditModal);\ndocument.addEventListener(\"keydown\", function(e) {\n    if (e.key === \"Escape\" && !$af9cefb2b7a6e9f1$var$editModal.classList.contains(\"hidden\")) $af9cefb2b7a6e9f1$var$closeEditModal();\n});\n$af9cefb2b7a6e9f1$var$editForm.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const taskId = $af9cefb2b7a6e9f1$var$editForm.dataset.taskId;\n    const editedTaskIndex = $af9cefb2b7a6e9f1$var$tasksList.findIndex((task)=>task.id === taskId);\n    if (editedTaskIndex !== -1) {\n        $af9cefb2b7a6e9f1$var$tasksList[editedTaskIndex] = {\n            ...$af9cefb2b7a6e9f1$var$tasksList[editedTaskIndex],\n            title: $af9cefb2b7a6e9f1$var$editTitleInput.value,\n            category: $af9cefb2b7a6e9f1$var$editCategorySelect.value,\n            description: $af9cefb2b7a6e9f1$var$editDescriptionText.value,\n            deadline: new Date($af9cefb2b7a6e9f1$var$editDeadlineTime.value)\n        };\n        localStorage.setItem($af9cefb2b7a6e9f1$var$localStorageKey, JSON.stringify($af9cefb2b7a6e9f1$var$tasksList));\n        $af9cefb2b7a6e9f1$var$renderTasks();\n        (0, $9EgcF.Notify).success(\"Task updated successfully!\", {\n            position: \"center-center\",\n            timeout: 1000\n        });\n        $af9cefb2b7a6e9f1$var$editModal.classList.add(\"hidden\");\n        $af9cefb2b7a6e9f1$var$editOverlay.classList.add(\"hidden\");\n    }\n});\n// First loading page\n$af9cefb2b7a6e9f1$var$loadTasks();\n// Filter tasks\nlet $af9cefb2b7a6e9f1$var$currentCategoryFilter = \"all\";\nlet $af9cefb2b7a6e9f1$var$currentIsCompletedFilter = \"all\";\nfunction $af9cefb2b7a6e9f1$var$applyFilters() {\n    let filteredTasks = $af9cefb2b7a6e9f1$var$tasksList;\n    // Apply isCompleted filter\n    if ($af9cefb2b7a6e9f1$var$currentIsCompletedFilter === \"active\") filteredTasks = filteredTasks.filter((task)=>!task.isCompleted);\n    else if ($af9cefb2b7a6e9f1$var$currentIsCompletedFilter === \"completed\") filteredTasks = filteredTasks.filter((task)=>task.isCompleted);\n    // Apply category filter\n    if ($af9cefb2b7a6e9f1$var$currentCategoryFilter !== \"all\") filteredTasks = filteredTasks.filter((task)=>task.category === $af9cefb2b7a6e9f1$var$currentCategoryFilter);\n    $af9cefb2b7a6e9f1$var$renderTasks(filteredTasks);\n}\n// Update the isCompleted filter\n$af9cefb2b7a6e9f1$var$filtereBtnIsCompleted.forEach((button)=>{\n    button.addEventListener(\"click\", function() {\n        $af9cefb2b7a6e9f1$var$filtereBtnIsCompleted.forEach((btn)=>btn.classList.remove(\"active-filter\"));\n        this.classList.add(\"active-filter\");\n        $af9cefb2b7a6e9f1$var$currentIsCompletedFilter = this.getAttribute(\"data-filter\");\n        $af9cefb2b7a6e9f1$var$applyFilters();\n    });\n});\n// Update the category filter\n$af9cefb2b7a6e9f1$var$categoryFilter.addEventListener(\"change\", ()=>{\n    $af9cefb2b7a6e9f1$var$currentCategoryFilter = $af9cefb2b7a6e9f1$var$categoryFilter.value;\n    $af9cefb2b7a6e9f1$var$applyFilters();\n});\n// Get current date\nconst $af9cefb2b7a6e9f1$var$currentDate = new Date();\nconst $af9cefb2b7a6e9f1$var$currentDay = $af9cefb2b7a6e9f1$var$currentDate.getDate().toString().padStart(2, \"0\");\nconst $af9cefb2b7a6e9f1$var$currentMonth = $af9cefb2b7a6e9f1$var$currentDate.toLocaleString(\"en-US\", {\n    month: \"long\"\n});\nconst $af9cefb2b7a6e9f1$var$currentYear = $af9cefb2b7a6e9f1$var$currentDate.getFullYear();\n$af9cefb2b7a6e9f1$var$today.innerHTML = ` <p class=\"data-day\">${$af9cefb2b7a6e9f1$var$currentDay}</p>\r\n        <p class=\"data-month\">${$af9cefb2b7a6e9f1$var$currentMonth} <span class=\"data-year\">${$af9cefb2b7a6e9f1$var$currentYear}</span></p>`;\n\n\n//# sourceMappingURL=tasks.559f87e4.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = new __parcel__URL__(\"symbol-defs.2cd203c5.svg\").toString();","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"7UCSQ\\\",\\\"tasks.559f87e4.js\\\",\\\"2d88Z\\\",\\\"symbol-defs.2cd203c5.svg\\\"]\"));","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\nimport sprite from \"../src/images/symbol-defs.svg\";\nvar Category;\n(function (Category) {\n    Category[\"Work\"] = \"work\";\n    Category[\"Health\"] = \"health\";\n    Category[\"Finance\"] = \"finance\";\n    Category[\"Family\"] = \"family\";\n    Category[\"Friends\"] = \"friends\";\n    Category[\"Home\"] = \"home\";\n    Category[\"Shopping\"] = \"shopping\";\n    Category[\"Travel\"] = \"travel\";\n    Category[\"Learning\"] = \"learning\";\n    Category[\"Miscellaneous\"] = \"miscellaneous\";\n})(Category || (Category = {}));\nconst localStorageKey = \"taska-list\";\nlet tasksList = [];\nconst today = document.querySelector(\".wrap-data\");\nconst tasks = document.querySelector(\".tasks-list\");\nconst filtereBtnIsCompleted = document.querySelectorAll(\".btn-isCompleted\");\nconst categoryFilter = document.getElementById(\"categoryFilter\");\nconst editModal = document.querySelector(\".modal-edit\");\nconst editOverlay = document.querySelector(\".overlay-edit\");\nconst editForm = document.getElementById(\"editForm\");\nconst editTitleInput = document.getElementById(\"editTitleInput\");\nconst editCategorySelect = document.getElementById(\"editCategorySelect\");\nconst editDescriptionText = document.getElementById(\"editDescriptionText\");\nconst editDeadlineTime = document.getElementById(\"editDeadlineTime\");\nconst closeEditModalBtn = document.querySelector(\".btn-modal-close-edit\");\nfunction loadTasks() {\n    const storedTasks = JSON.parse(localStorage.getItem(localStorageKey) || \"[]\");\n    tasksList = storedTasks.map((task) => ({\n        ...task,\n        deadline: new Date(task.deadline),\n    }));\n    renderTasks();\n}\nfunction renderTasks(filteredTasks = tasksList) {\n    const markupTasks = filteredTasks\n        .map((task) => {\n        const formattedDeadline = new Date(task.deadline).toLocaleDateString(\"en-GB\", {\n            day: \"2-digit\",\n            month: \"short\",\n            year: \"numeric\",\n        });\n        return `\r\n      <li class=\"task-item\" data-id=\"${task.id}\">\r\n      <svg width=\"32\" height=\"32\" class=\"${task.isCompleted ? \"icon-completed\" : \"icon-notCompleted\"} toggle-complete\">\r\n      <use href=\"${sprite}#${task.isCompleted ? \"icon-check2-circle\" : \"icon-circle\"}\" class=\"done-icon\"></use>\r\n    </svg>\r\n        <div class=\"wrap-content\">\r\n          <div class=\"title-container\">\r\n            <h2 class=\"${task.isCompleted ? \"title-task-completed\" : \"title-task\"}\">${task.title}</h2>\r\n            <div class=\"icons-container\">\r\n              <button type=\"button\" class=\"icon-btn edit-btn\">\r\n                <svg width=\"30\" height=\"30\" class=\"svg-icon\">\r\n                  <use href=\"${sprite}#icon-pencil-fill\"></use>\r\n                </svg>\r\n              </button>\r\n              <button type=\"button\" class=\"icon-btn delete-btn\">\r\n                <svg width=\"30\" height=\"30\" class=\"svg-icon\">\r\n                  <use href=\"${sprite}#icon-trash-fill\"></use>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <p class=\"category-task\">${task.category}</p>\r\n          ${task.description\n            ? `<p class=\"${task.isCompleted\n                ? \"description-task-completed\"\n                : \"description-task\"}\">${task.description}</p>`\n            : \"\"}\r\n          <p class=\"dedline-data-task\">${formattedDeadline}</p>\r\n        </div>\r\n      </li>\r\n    `;\n    })\n        .join(\"\");\n    tasks.innerHTML = markupTasks;\n}\n// Delete task\nfunction deleteTask(taskId) {\n    tasksList = tasksList.filter((task) => task.id !== taskId);\n    localStorage.setItem(localStorageKey, JSON.stringify(tasksList));\n    renderTasks();\n}\n// Edit tasks state \"isCompleted\"\nfunction toggleTaskCompletion(taskId) {\n    tasksList = tasksList.map((task) => task.id === taskId ? { ...task, isCompleted: !task.isCompleted } : task);\n    localStorage.setItem(localStorageKey, JSON.stringify(tasksList));\n    renderTasks();\n}\ntasks.addEventListener(\"click\", (e) => {\n    const target = e.target;\n    // Check for delete button\n    if (target.closest(\".delete-btn\")) {\n        const taskItem = target.closest(\".task-item\");\n        const taskId = taskItem.dataset.id;\n        if (taskId) {\n            deleteTask(taskId);\n            Notify.info(\"Task deleted successfully!\", {\n                position: \"center-center\",\n                timeout: 1000,\n            });\n        }\n    }\n    const toggleCompleteElement = target.closest(\".toggle-complete\");\n    if (toggleCompleteElement) {\n        const taskItem = toggleCompleteElement.closest(\".task-item\");\n        const taskId = taskItem?.dataset.id;\n        if (taskId) {\n            toggleTaskCompletion(taskId);\n            Notify.success(\"Task completion status updated!\", {\n                position: \"center-center\",\n                timeout: 1000,\n            });\n        }\n    }\n    if (target.closest(\".edit-btn\")) {\n        const taskItem = target.closest(\".task-item\");\n        const taskId = taskItem.dataset.id;\n        const taskToEdit = tasksList.find((task) => task.id === taskId);\n        if (taskToEdit)\n            openEditModal(taskToEdit);\n    }\n});\n// Edit task\nfunction openEditModal(task) {\n    editModal.classList.remove(\"hidden\");\n    editOverlay.classList.remove(\"hidden\");\n    editTitleInput.value = task.title;\n    editCategorySelect.value = task.category;\n    editDescriptionText.value = task.description || \"\";\n    editDeadlineTime.value = task.deadline.toISOString().slice(0, 16);\n    editForm.dataset.taskId = task.id;\n}\nconst closeEditModal = function () {\n    editModal.classList.add(\"hidden\");\n    editOverlay.classList.add(\"hidden\");\n};\ncloseEditModalBtn.addEventListener(\"click\", closeEditModal);\neditOverlay.addEventListener(\"click\", closeEditModal);\ndocument.addEventListener(\"keydown\", function (e) {\n    if (e.key === \"Escape\" && !editModal.classList.contains(\"hidden\")) {\n        closeEditModal();\n    }\n});\neditForm.addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n    const taskId = editForm.dataset.taskId;\n    const editedTaskIndex = tasksList.findIndex((task) => task.id === taskId);\n    if (editedTaskIndex !== -1) {\n        tasksList[editedTaskIndex] = {\n            ...tasksList[editedTaskIndex],\n            title: editTitleInput.value,\n            category: editCategorySelect.value,\n            description: editDescriptionText.value,\n            deadline: new Date(editDeadlineTime.value),\n        };\n        localStorage.setItem(localStorageKey, JSON.stringify(tasksList));\n        renderTasks();\n        Notify.success(\"Task updated successfully!\", {\n            position: \"center-center\",\n            timeout: 1000,\n        });\n        editModal.classList.add(\"hidden\");\n        editOverlay.classList.add(\"hidden\");\n    }\n});\n// First loading page\nloadTasks();\n// Filter tasks\nlet currentCategoryFilter = \"all\";\nlet currentIsCompletedFilter = \"all\";\nfunction applyFilters() {\n    let filteredTasks = tasksList;\n    // Apply isCompleted filter\n    if (currentIsCompletedFilter === \"active\") {\n        filteredTasks = filteredTasks.filter((task) => !task.isCompleted);\n    }\n    else if (currentIsCompletedFilter === \"completed\") {\n        filteredTasks = filteredTasks.filter((task) => task.isCompleted);\n    }\n    // Apply category filter\n    if (currentCategoryFilter !== \"all\") {\n        filteredTasks = filteredTasks.filter((task) => task.category === currentCategoryFilter);\n    }\n    renderTasks(filteredTasks);\n}\n// Update the isCompleted filter\nfiltereBtnIsCompleted.forEach((button) => {\n    button.addEventListener(\"click\", function () {\n        filtereBtnIsCompleted.forEach((btn) => btn.classList.remove(\"active-filter\"));\n        this.classList.add(\"active-filter\");\n        currentIsCompletedFilter = this.getAttribute(\"data-filter\");\n        applyFilters();\n    });\n});\n// Update the category filter\ncategoryFilter.addEventListener(\"change\", () => {\n    currentCategoryFilter = categoryFilter.value;\n    applyFilters();\n});\n// Get current date\nconst currentDate = new Date();\nconst currentDay = currentDate.getDate().toString().padStart(2, \"0\");\nconst currentMonth = currentDate.toLocaleString(\"en-US\", { month: \"long\" });\nconst currentYear = currentDate.getFullYear();\ntoday.innerHTML = ` <p class=\"data-day\">${currentDay}</p>\r\n        <p class=\"data-month\">${currentMonth} <span class=\"data-year\">${currentYear}</span></p>`;\n//# sourceMappingURL=tasks.js.map","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\r\nimport sprite from \"../src/images/symbol-defs.svg\";\r\n\r\nenum Category {\r\n  Work = \"work\",\r\n  Health = \"health\",\r\n  Finance = \"finance\",\r\n  Family = \"family\",\r\n  Friends = \"friends\",\r\n  Home = \"home\",\r\n  Shopping = \"shopping\",\r\n  Travel = \"travel\",\r\n  Learning = \"learning\",\r\n  Miscellaneous = \"miscellaneous\",\r\n}\r\n\r\ntype FilterStateIsCompleted = \"all\" | \"active\" | \"completed\";\r\n\r\ntype Task = {\r\n  id: string;\r\n  title: string;\r\n  category: Category;\r\n  isCompleted: boolean;\r\n  description?: string;\r\n  deadline: Date;\r\n};\r\n\r\nconst localStorageKey: string = \"taska-list\";\r\n\r\nlet tasksList: Task[] = [];\r\n\r\nconst today = document.querySelector(\".wrap-data\") as HTMLDivElement;\r\nconst tasks = document.querySelector(\".tasks-list\") as HTMLUListElement;\r\nconst filtereBtnIsCompleted: NodeListOf<HTMLButtonElement> =\r\n  document.querySelectorAll(\".btn-isCompleted\");\r\nconst categoryFilter = document.getElementById(\r\n  \"categoryFilter\"\r\n) as HTMLSelectElement;\r\nconst editModal = document.querySelector(\".modal-edit\") as HTMLElement;\r\nconst editOverlay = document.querySelector(\".overlay-edit\") as HTMLDivElement;\r\nconst editForm = document.getElementById(\"editForm\") as HTMLFormElement;\r\nconst editTitleInput = document.getElementById(\r\n  \"editTitleInput\"\r\n) as HTMLInputElement;\r\nconst editCategorySelect = document.getElementById(\r\n  \"editCategorySelect\"\r\n) as HTMLSelectElement;\r\nconst editDescriptionText = document.getElementById(\r\n  \"editDescriptionText\"\r\n) as HTMLTextAreaElement;\r\nconst editDeadlineTime = document.getElementById(\r\n  \"editDeadlineTime\"\r\n) as HTMLInputElement;\r\nconst closeEditModalBtn = document.querySelector(\r\n  \".btn-modal-close-edit\"\r\n) as HTMLButtonElement;\r\n\r\nfunction loadTasks(): void {\r\n  const storedTasks = JSON.parse(localStorage.getItem(localStorageKey) || \"[]\");\r\n  tasksList = storedTasks.map((task: Task) => ({\r\n    ...task,\r\n    deadline: new Date(task.deadline),\r\n  }));\r\n  renderTasks();\r\n}\r\n\r\nfunction renderTasks(filteredTasks: Task[] = tasksList): void {\r\n  const markupTasks = filteredTasks\r\n    .map((task) => {\r\n      const formattedDeadline = new Date(task.deadline).toLocaleDateString(\r\n        \"en-GB\",\r\n        {\r\n          day: \"2-digit\",\r\n          month: \"short\",\r\n          year: \"numeric\",\r\n        }\r\n      );\r\n\r\n      return `\r\n      <li class=\"task-item\" data-id=\"${task.id}\">\r\n      <svg width=\"32\" height=\"32\" class=\"${\r\n        task.isCompleted ? \"icon-completed\" : \"icon-notCompleted\"\r\n      } toggle-complete\">\r\n      <use href=\"${sprite}#${\r\n        task.isCompleted ? \"icon-check2-circle\" : \"icon-circle\"\r\n      }\" class=\"done-icon\"></use>\r\n    </svg>\r\n        <div class=\"wrap-content\">\r\n          <div class=\"title-container\">\r\n            <h2 class=\"${\r\n              task.isCompleted ? \"title-task-completed\" : \"title-task\"\r\n            }\">${task.title}</h2>\r\n            <div class=\"icons-container\">\r\n              <button type=\"button\" class=\"icon-btn edit-btn\">\r\n                <svg width=\"30\" height=\"30\" class=\"svg-icon\">\r\n                  <use href=\"${sprite}#icon-pencil-fill\"></use>\r\n                </svg>\r\n              </button>\r\n              <button type=\"button\" class=\"icon-btn delete-btn\">\r\n                <svg width=\"30\" height=\"30\" class=\"svg-icon\">\r\n                  <use href=\"${sprite}#icon-trash-fill\"></use>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <p class=\"category-task\">${task.category}</p>\r\n          ${\r\n            task.description\r\n              ? `<p class=\"${\r\n                  task.isCompleted\r\n                    ? \"description-task-completed\"\r\n                    : \"description-task\"\r\n                }\">${task.description}</p>`\r\n              : \"\"\r\n          }\r\n          <p class=\"dedline-data-task\">${formattedDeadline}</p>\r\n        </div>\r\n      </li>\r\n    `;\r\n    })\r\n    .join(\"\");\r\n\r\n  tasks.innerHTML = markupTasks;\r\n}\r\n\r\n// Delete task\r\nfunction deleteTask(taskId: string): void {\r\n  tasksList = tasksList.filter((task) => task.id !== taskId);\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasksList));\r\n  renderTasks();\r\n}\r\n\r\n// Edit tasks state \"isCompleted\"\r\n\r\nfunction toggleTaskCompletion(taskId: string): void {\r\n  tasksList = tasksList.map((task) =>\r\n    task.id === taskId ? { ...task, isCompleted: !task.isCompleted } : task\r\n  );\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasksList));\r\n  renderTasks();\r\n}\r\n\r\ntasks.addEventListener(\"click\", (e): void => {\r\n  const target = e.target as HTMLElement;\r\n\r\n  // Check for delete button\r\n  if (target.closest(\".delete-btn\")) {\r\n    const taskItem = target.closest(\".task-item\") as HTMLLIElement;\r\n    const taskId = taskItem.dataset.id;\r\n    if (taskId) {\r\n      deleteTask(taskId);\r\n      Notify.info(\"Task deleted successfully!\", {\r\n        position: \"center-center\",\r\n        timeout: 1000,\r\n      });\r\n    }\r\n  }\r\n\r\n  const toggleCompleteElement = target.closest(\".toggle-complete\");\r\n  if (toggleCompleteElement) {\r\n    const taskItem = toggleCompleteElement.closest(\r\n      \".task-item\"\r\n    ) as HTMLLIElement;\r\n    const taskId = taskItem?.dataset.id;\r\n    if (taskId) {\r\n      toggleTaskCompletion(taskId);\r\n      Notify.success(\"Task completion status updated!\", {\r\n        position: \"center-center\",\r\n        timeout: 1000,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (target.closest(\".edit-btn\")) {\r\n    const taskItem = target.closest(\".task-item\") as HTMLLIElement;\r\n    const taskId = taskItem.dataset.id;\r\n    const taskToEdit = tasksList.find((task) => task.id === taskId);\r\n    if (taskToEdit) openEditModal(taskToEdit);\r\n  }\r\n});\r\n\r\n// Edit task\r\n\r\nfunction openEditModal(task: Task): void {\r\n  editModal.classList.remove(\"hidden\");\r\n  editOverlay.classList.remove(\"hidden\");\r\n  editTitleInput.value = task.title;\r\n  editCategorySelect.value = task.category;\r\n  editDescriptionText.value = task.description || \"\";\r\n  editDeadlineTime.value = task.deadline.toISOString().slice(0, 16);\r\n  editForm.dataset.taskId = task.id;\r\n}\r\n\r\nconst closeEditModal = function (): void {\r\n  editModal.classList.add(\"hidden\");\r\n  editOverlay.classList.add(\"hidden\");\r\n};\r\n\r\ncloseEditModalBtn.addEventListener(\"click\", closeEditModal);\r\n\r\neditOverlay.addEventListener(\"click\", closeEditModal);\r\n\r\ndocument.addEventListener(\"keydown\", function (e): void {\r\n  if (e.key === \"Escape\" && !editModal.classList.contains(\"hidden\")) {\r\n    closeEditModal();\r\n  }\r\n});\r\n\r\neditForm.addEventListener(\"submit\", (e) => {\r\n  e.preventDefault();\r\n  const taskId = editForm.dataset.taskId;\r\n  const editedTaskIndex = tasksList.findIndex((task) => task.id === taskId);\r\n\r\n  if (editedTaskIndex !== -1) {\r\n    tasksList[editedTaskIndex] = {\r\n      ...tasksList[editedTaskIndex],\r\n      title: editTitleInput.value,\r\n      category: editCategorySelect.value as Category,\r\n      description: editDescriptionText.value,\r\n      deadline: new Date(editDeadlineTime.value),\r\n    };\r\n\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasksList));\r\n    renderTasks();\r\n    Notify.success(\"Task updated successfully!\", {\r\n      position: \"center-center\",\r\n      timeout: 1000,\r\n    });\r\n    editModal.classList.add(\"hidden\");\r\n    editOverlay.classList.add(\"hidden\");\r\n  }\r\n});\r\n\r\n// First loading page\r\n\r\nloadTasks();\r\n\r\n// Filter tasks\r\n\r\nlet currentCategoryFilter: Category | \"all\" = \"all\";\r\nlet currentIsCompletedFilter: FilterStateIsCompleted = \"all\";\r\n\r\nfunction applyFilters(): void {\r\n  let filteredTasks: Task[] = tasksList;\r\n  // Apply isCompleted filter\r\n  if (currentIsCompletedFilter === \"active\") {\r\n    filteredTasks = filteredTasks.filter((task) => !task.isCompleted);\r\n  } else if (currentIsCompletedFilter === \"completed\") {\r\n    filteredTasks = filteredTasks.filter((task) => task.isCompleted);\r\n  }\r\n\r\n  // Apply category filter\r\n  if (currentCategoryFilter !== \"all\") {\r\n    filteredTasks = filteredTasks.filter(\r\n      (task) => task.category === currentCategoryFilter\r\n    );\r\n  }\r\n\r\n  renderTasks(filteredTasks);\r\n}\r\n\r\n// Update the isCompleted filter\r\nfiltereBtnIsCompleted.forEach((button) => {\r\n  button.addEventListener(\"click\", function () {\r\n    filtereBtnIsCompleted.forEach((btn) =>\r\n      btn.classList.remove(\"active-filter\")\r\n    );\r\n    this.classList.add(\"active-filter\");\r\n\r\n    currentIsCompletedFilter = this.getAttribute(\r\n      \"data-filter\"\r\n    ) as FilterStateIsCompleted;\r\n    applyFilters();\r\n  });\r\n});\r\n\r\n// Update the category filter\r\ncategoryFilter.addEventListener(\"change\", (): void => {\r\n  currentCategoryFilter = categoryFilter.value as Category | \"all\";\r\n  applyFilters();\r\n});\r\n\r\n// Get current date\r\n\r\nconst currentDate = new Date();\r\nconst currentDay = currentDate.getDate().toString().padStart(2, \"0\");\r\nconst currentMonth = currentDate.toLocaleString(\"en-US\", { month: \"long\" });\r\nconst currentYear = currentDate.getFullYear();\r\n\r\ntoday.innerHTML = ` <p class=\"data-day\">${currentDay}</p>\r\n        <p class=\"data-month\">${currentMonth} <span class=\"data-year\">${currentYear}</span></p>`;\r\n"],"names":["$parcel$interopDefault","a","__esModule","default","Category","$af9cefb2b7a6e9f1$var$Category","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$9EgcF","$fGYy7","$af9cefb2b7a6e9f1$var$localStorageKey","$af9cefb2b7a6e9f1$var$tasksList","$af9cefb2b7a6e9f1$var$today","document","querySelector","$af9cefb2b7a6e9f1$var$tasks","$af9cefb2b7a6e9f1$var$filtereBtnIsCompleted","querySelectorAll","$af9cefb2b7a6e9f1$var$categoryFilter","getElementById","$af9cefb2b7a6e9f1$var$editModal","$af9cefb2b7a6e9f1$var$editOverlay","$af9cefb2b7a6e9f1$var$editForm","$af9cefb2b7a6e9f1$var$editTitleInput","$af9cefb2b7a6e9f1$var$editCategorySelect","$af9cefb2b7a6e9f1$var$editDescriptionText","$af9cefb2b7a6e9f1$var$editDeadlineTime","$af9cefb2b7a6e9f1$var$closeEditModalBtn","$af9cefb2b7a6e9f1$var$renderTasks","filteredTasks","markupTasks","map","task","formattedDeadline","Date","deadline","toLocaleDateString","day","month","year","isCompleted","title","category","description","join","innerHTML","addEventListener","e","target","closest","taskId","taskItem","dataset","filter","localStorage","setItem","stringify","Notify","info","position","timeout","toggleCompleteElement","success","taskToEdit","find","classList","remove","value","toISOString","slice","$af9cefb2b7a6e9f1$var$closeEditModal","add","key","contains","preventDefault","editedTaskIndex","findIndex","storedTasks","getItem","$af9cefb2b7a6e9f1$var$currentCategoryFilter","$af9cefb2b7a6e9f1$var$currentIsCompletedFilter","$af9cefb2b7a6e9f1$var$applyFilters","forEach","button","btn","getAttribute","$af9cefb2b7a6e9f1$var$currentDate","$af9cefb2b7a6e9f1$var$currentDay","getDate","padStart","$af9cefb2b7a6e9f1$var$currentMonth","toLocaleString","$af9cefb2b7a6e9f1$var$currentYear","getFullYear"],"version":3,"file":"tasks.559f87e4.js.map"}